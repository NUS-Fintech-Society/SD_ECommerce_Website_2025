{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { apiRequest } from \"../api/apiRequest\";\nimport \"../Signup_Login.css\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleLogin = async () => {\n    if (!email || !password) {\n      setErrorMessage(\"Please enter both email and password.\");\n      return;\n    }\n    try {\n      const response = await apiRequest(\"login\", \"POST\", \"\", {\n        email,\n        password\n      });\n      if (response.success) {\n        localStorage.setItem(\"token\", response.data.token); //Ensure JWT bearer token is stored in the local storage after logging in\n        console.log(\"Login successful:\", response.data);\n        navigate(\"/home\");\n      } else {\n        setErrorMessage(response.message || \"An unknown error occurred.\");\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      setErrorMessage(\"An error occurred during login. Please try again.\");\n    }\n  };\n};\n_s(Login, \"luEppbUrbaXdbCQOiVa4a5iz6js=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","useNavigate","apiRequest","Login","_s","navigate","email","setEmail","password","setPassword","errorMessage","setErrorMessage","handleLogin","response","success","localStorage","setItem","data","token","console","log","message","error","_c","$RefreshReg$"],"sources":["/Users/eldridgeng/SD_ECommerce_Website/nfs-eleos-client/src/components/Login.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { apiRequest } from \"../api/apiRequest\";\nimport \"../Signup_Login.css\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      setErrorMessage(\"Please enter both email and password.\");\n      return;\n    }\n\n    try {\n      const response = await apiRequest(\"login\", \"POST\", \"\", { email, password });\n      if (response.success) {\n        localStorage.setItem(\"token\", response.data.token); //Ensure JWT bearer token is stored in the local storage after logging in\n        console.log(\"Login successful:\", response.data);\n        navigate(\"/home\");\n      } else {\n        setErrorMessage(response.message || \"An unknown error occurred.\");\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      setErrorMessage(\"An error occurred during login. Please try again.\");\n    }\n  };\n\n  \n};\n\nexport default Login;\n"],"mappings":";AAAA,SAAgBA,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAO,qBAAqB;AAE5B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACN,KAAK,IAAI,CAACE,QAAQ,EAAE;MACvBG,eAAe,CAAC,uCAAuC,CAAC;MACxD;IACF;IAEA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMX,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE;QAAEI,KAAK;QAAEE;MAAS,CAAC,CAAC;MAC3E,IAAIK,QAAQ,CAACC,OAAO,EAAE;QACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;QACpDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,QAAQ,CAACI,IAAI,CAAC;QAC/CZ,QAAQ,CAAC,OAAO,CAAC;MACnB,CAAC,MAAM;QACLM,eAAe,CAACE,QAAQ,CAACQ,OAAO,IAAI,4BAA4B,CAAC;MACnE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCX,eAAe,CAAC,mDAAmD,CAAC;IACtE;EACF,CAAC;AAGH,CAAC;AAACP,EAAA,CA7BID,KAAK;EAAA,QACQF,WAAW;AAAA;AAAAsB,EAAA,GADxBpB,KAAK;AA+BX,eAAeA,KAAK;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}