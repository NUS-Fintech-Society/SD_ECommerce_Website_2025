{"ast":null,"code":"import axios from \"axios\";\n\n// Define a type for the API response structure\n\n/**\n * Generalized function to make API requests.\n *\n * @param collection_name - The name of the API route (e.g., \"order_route\", \"product_route\").\n * @param method - HTTP method to use (\"GET\", \"POST\", \"PUT\", \"DELETE\").\n * @param endpoint - Specific endpoint or resource to target (e.g., \":id\", \"/create\", \"/update/:id\"). Refer to the server file\n * @param data - Data to be sent with the request (used for POST, PUT, DELETE).\n *\n * @returns A promise that resolves with the API response, containing the success status, data, and optional error message.\n */\n\n// Define a general API Request function\nexport const apiRequest = async (collection_name, method, endpoint, data = null) => {\n  try {\n    const url = `${process.env.REACT_APP_API_URL}/${collection_name}/${endpoint}`;\n    let response;\n\n    // Handle different HTTP methods\n    switch (method) {\n      case \"GET\":\n        response = await axios.get(url, {\n          params: data\n        });\n        break;\n      case \"POST\":\n        response = await axios.post(url, {\n          data\n        });\n        break;\n      case \"PUT\":\n        response = await axios.put(url, {\n          data\n        });\n        break;\n      case \"DELETE\":\n        response = await axios.delete(url, {\n          data\n        });\n        break;\n      default:\n        throw new Error(\"Invalid HTTP method\");\n    }\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"API error:\", error);\n    return {\n      success: false,\n      message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"An error occurred\"\n    };\n  }\n};\n\n// Example usage of the API handler function for user collection\n// export const getUserById = async (id: string) => {\n//   return await apiRequest (\"order_route\", \"GET\", id);\n// };\n\n// Example usage for creating a product\n// export const createProduct = async (productData: any) => {\n//   return await apiRequest (\"product_route\", \"POST\", \"create\", productData);\n// };\n\n// Example usage for updating a product\n// export const updateProduct = async (id: string, updatedData: any) => {\n//   return await apiRequest (\"product_route\", \"PUT\", `update/${id}`, updatedData);\n// };\n\n// Example usage for deleting a product\n// export const deleteProduct = async (id: string) => {\n//   return await apiRequest (\"product_route\", \"DELETE\", `delete/${id}`);\n// };","map":{"version":3,"names":["axios","apiRequest","collection_name","method","endpoint","data","url","process","env","REACT_APP_API_URL","response","get","params","post","put","delete","Error","success","error","_error$response","_error$response$data","console","message"],"sources":["/Users/eldridgeng/SD_ECommerce_Website/nfs-eleos-client/src/api/apiRequest.tsx"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\n\n// Define a type for the API response structure\ninterface ApiResponse<T = any> {\n    success: boolean;\n    message?: string;\n    data?: T;\n}\n\n/**\n * Generalized function to make API requests.\n *\n * @param collection_name - The name of the API route (e.g., \"order_route\", \"product_route\").\n * @param method - HTTP method to use (\"GET\", \"POST\", \"PUT\", \"DELETE\").\n * @param endpoint - Specific endpoint or resource to target (e.g., \":id\", \"/create\", \"/update/:id\"). Refer to the server file\n * @param data - Data to be sent with the request (used for POST, PUT, DELETE).\n *\n * @returns A promise that resolves with the API response, containing the success status, data, and optional error message.\n */\n\n// Define a general API Request function\nexport const apiRequest = async (\n    collection_name: string,\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    endpoint: string,\n    data: any = null\n): Promise<ApiResponse> => {\n    try {\n        const url = `${process.env.REACT_APP_API_URL}/${collection_name}/${endpoint}`;\n        let response: AxiosResponse;\n\n        // Handle different HTTP methods\n        switch (method) {\n            case \"GET\":\n                response = await axios.get(url, { params: data });\n                break;\n            case \"POST\":\n                response = await axios.post(url, { data });\n                break;\n            case \"PUT\":\n                response = await axios.put(url, { data });\n                break;\n            case \"DELETE\":\n                response = await axios.delete(url, { data });\n                break;\n            default:\n                throw new Error(\"Invalid HTTP method\");\n        }\n\n        return {\n            success: true,\n            data: response.data,\n        };\n    } catch (error: any) {\n        console.error(\"API error:\", error);\n        return {\n            success: false,\n            message: error.response?.data?.message || \"An error occurred\",\n        };\n    }\n};\n\n// Example usage of the API handler function for user collection\n// export const getUserById = async (id: string) => {\n//   return await apiRequest (\"order_route\", \"GET\", id);\n// };\n\n// Example usage for creating a product\n// export const createProduct = async (productData: any) => {\n//   return await apiRequest (\"product_route\", \"POST\", \"create\", productData);\n// };\n\n// Example usage for updating a product\n// export const updateProduct = async (id: string, updatedData: any) => {\n//   return await apiRequest (\"product_route\", \"PUT\", `update/${id}`, updatedData);\n// };\n\n// Example usage for deleting a product\n// export const deleteProduct = async (id: string) => {\n//   return await apiRequest (\"product_route\", \"DELETE\", `delete/${id}`);\n// };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;;AAE5C;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CACtBC,eAAuB,EACvBC,MAAyC,EACzCC,QAAgB,EAChBC,IAAS,GAAG,IAAI,KACO;EACvB,IAAI;IACA,MAAMC,GAAG,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAIP,eAAe,IAAIE,QAAQ,EAAE;IAC7E,IAAIM,QAAuB;;IAE3B;IACA,QAAQP,MAAM;MACV,KAAK,KAAK;QACNO,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACL,GAAG,EAAE;UAAEM,MAAM,EAAEP;QAAK,CAAC,CAAC;QACjD;MACJ,KAAK,MAAM;QACPK,QAAQ,GAAG,MAAMV,KAAK,CAACa,IAAI,CAACP,GAAG,EAAE;UAAED;QAAK,CAAC,CAAC;QAC1C;MACJ,KAAK,KAAK;QACNK,QAAQ,GAAG,MAAMV,KAAK,CAACc,GAAG,CAACR,GAAG,EAAE;UAAED;QAAK,CAAC,CAAC;QACzC;MACJ,KAAK,QAAQ;QACTK,QAAQ,GAAG,MAAMV,KAAK,CAACe,MAAM,CAACT,GAAG,EAAE;UAAED;QAAK,CAAC,CAAC;QAC5C;MACJ;QACI,MAAM,IAAIW,KAAK,CAAC,qBAAqB,CAAC;IAC9C;IAEA,OAAO;MACHC,OAAO,EAAE,IAAI;MACbZ,IAAI,EAAEK,QAAQ,CAACL;IACnB,CAAC;EACL,CAAC,CAAC,OAAOa,KAAU,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACjBC,OAAO,CAACH,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,OAAO;MACHD,OAAO,EAAE,KAAK;MACdK,OAAO,EAAE,EAAAH,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBd,IAAI,cAAAe,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI;IAC9C,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}